                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Implement the iaddq instruction and Use it
                            | # 2. Loop Rolling 5 * 1
                            | # 
                            | # 
                            | # 
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 		
                            | # Loop Rolling
0x034: 2025                 | 	rrmovq %rdx,%rbp
0x036: c0f5fbffffffffffffff | 	iaddq $-5,%rbp		# limit = len - 5
0x040: 6152                 | 	subq %rbp,%rdx		# len = len - limit
0x042: 6255                 | 	andq %rbp,%rbp		# limit <= 0?
0x044: 716c01000000000000   | 	jle L_rest_handle	
0x04d:                      | L1:
0x04d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x057: 50b70800000000000000 | 	mrmovq 0x8(%rdi), %r11	# read val from src...
0x061: 50c71000000000000000 | 	mrmovq 0x10(%rdi), %r12	# read val from src...
0x06b: 50d71800000000000000 | 	mrmovq 0x18(%rdi), %r13	# read val from src...
0x075: 50e72000000000000000 | 	mrmovq 0x20(%rdi), %r14	# read val from src...
0x07f: 50872800000000000000 | 	mrmovq 0x28(%rdi), %r8	# read val from src...
                            | 
0x089: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x093: 40b60800000000000000 | 	rmmovq %r11, 0x8(%rsi)	# ...and store it to dst
0x09d: 40c61000000000000000 | 	rmmovq %r12, 0x10(%rsi)	# ...and store it to dst
0x0a7: 40d61800000000000000 | 	rmmovq %r13, 0x18(%rsi)	# ...and store it to dst
0x0b1: 40e62000000000000000 | 	rmmovq %r14, 0x20(%rsi)	# ...and store it to dst
0x0bb: 40862800000000000000 | 	rmmovq %r8, 0x28(%rsi)	# ...and store it to dst
                            | 	
0x0c5:                      | check_1:
0x0c5: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c7: 71da00000000000000   | 	jle check_2		# if so, goto check_next:	
0x0d0: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x0da:                      | check_2:
0x0da: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0dc: 71ef00000000000000   | 	jle check_3		# 
0x0e5: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x0ef:                      | check_3:
0x0ef: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0f1: 710401000000000000   | 	jle check_4			# 	
0x0fa: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x104:                      | check_4:
0x104: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x106: 711901000000000000   | 	jle check_5			
0x10f: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x119:                      | check_5:
0x119: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x11b: 712e01000000000000   | 	jle check_6		
0x124: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x12e:                      | check_6:
0x12e: 6288                 | 	andq %r8, %r8		# val <= 0?
0x130: 714301000000000000   | 	jle Npos		
0x139: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x143:                      | Npos:		
0x143: c0f5faffffffffffffff | 	iaddq	$-6,%rbp	# limit -= 6	
0x14d: c0f73000000000000000 | 	iaddq	$0x30,%rdi		# src += 6
0x157: c0f63000000000000000 | 	iaddq	$0x30,%rsi		# dst += 6
0x161: 6255                 | 	andq %rbp,%rbp		# limit > 0?
0x163: 764d00000000000000   | 	jg L1				# if so, goto L1:
                            | 
                            | # Handle the rest elements
0x16c:                      | L_rest_handle:
0x16c: 6052                 | 	addq %rbp,%rdx
0x16e: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x170: 71cb01000000000000   | 	jle Done			# if so, goto Done:
0x179:                      | L_rest:
0x179: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x183: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x185: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x18f: 71a201000000000000   | 	jle Npos_rest			# if so, goto Npos_rest:	
0x198: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x1a2:                      | Npos_rest:
0x1a2: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx	# len -= 1	
0x1ac: c0f70800000000000000 | 	iaddq	$8,%rdi		# src += 1
0x1b6: c0f60800000000000000 | 	iaddq	$8,%rsi		# dst += 1
0x1c0: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x1c2: 767901000000000000   | 	jg L_rest				# if so, goto L_rest:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1cb:                      | Done:
0x1cb: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1cc:                      | End:
                            | #/* $end ncopy-ys */
0x1cc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1d0:                      | 	.align 8
0x1d0:                      | src:
0x1d0: ffffffffffffffff     | 	.quad -1
0x1d8: 0200000000000000     | 	.quad 2
0x1e0: 0300000000000000     | 	.quad 3
0x1e8: 0400000000000000     | 	.quad 4
0x1f0: fbffffffffffffff     | 	.quad -5
0x1f8: 0600000000000000     | 	.quad 6
0x200: f9ffffffffffffff     | 	.quad -7
0x208: f8ffffffffffffff     | 	.quad -8
0x210: 0900000000000000     | 	.quad 9
0x218: f6ffffffffffffff     | 	.quad -10
0x220: 0b00000000000000     | 	.quad 11
0x228: 0c00000000000000     | 	.quad 12
0x230: f3ffffffffffffff     | 	.quad -13
0x238: 0e00000000000000     | 	.quad 14
0x240: f1ffffffffffffff     | 	.quad -15
0x248: f0ffffffffffffff     | 	.quad -16
0x250: 1100000000000000     | 	.quad 17
0x258: eeffffffffffffff     | 	.quad -18
0x260: 1300000000000000     | 	.quad 19
0x268: ecffffffffffffff     | 	.quad -20
0x270: ebffffffffffffff     | 	.quad -21
0x278: eaffffffffffffff     | 	.quad -22
0x280: 1700000000000000     | 	.quad 23
0x288: 1800000000000000     | 	.quad 24
0x290: e7ffffffffffffff     | 	.quad -25
0x298: 1a00000000000000     | 	.quad 26
0x2a0: e5ffffffffffffff     | 	.quad -27
0x2a8: 1c00000000000000     | 	.quad 28
0x2b0: e3ffffffffffffff     | 	.quad -29
0x2b8: 1e00000000000000     | 	.quad 30
0x2c0: 1f00000000000000     | 	.quad 31
0x2c8: e0ffffffffffffff     | 	.quad -32
0x2d0: 2100000000000000     | 	.quad 33
0x2d8: 2200000000000000     | 	.quad 34
0x2e0: ddffffffffffffff     | 	.quad -35
0x2e8: dcffffffffffffff     | 	.quad -36
0x2f0: dbffffffffffffff     | 	.quad -37
0x2f8: 2600000000000000     | 	.quad 38
0x300: 2700000000000000     | 	.quad 39
0x308: d8ffffffffffffff     | 	.quad -40
0x310: d7ffffffffffffff     | 	.quad -41
0x318: 2a00000000000000     | 	.quad 42
0x320: 2b00000000000000     | 	.quad 43
0x328: d4ffffffffffffff     | 	.quad -44
0x330: d3ffffffffffffff     | 	.quad -45
0x338: d2ffffffffffffff     | 	.quad -46
0x340: 2f00000000000000     | 	.quad 47
0x348: 3000000000000000     | 	.quad 48
0x350: 3100000000000000     | 	.quad 49
0x358: ceffffffffffffff     | 	.quad -50
0x360: cdffffffffffffff     | 	.quad -51
0x368: 3400000000000000     | 	.quad 52
0x370: cbffffffffffffff     | 	.quad -53
0x378: caffffffffffffff     | 	.quad -54
0x380: 3700000000000000     | 	.quad 55
0x388: 3800000000000000     | 	.quad 56
0x390: 3900000000000000     | 	.quad 57
0x398: c6ffffffffffffff     | 	.quad -58
0x3a0: 3b00000000000000     | 	.quad 59
0x3a8: c4ffffffffffffff     | 	.quad -60
0x3b0: 3d00000000000000     | 	.quad 61
0x3b8: c2ffffffffffffff     | 	.quad -62
0x3c0: c1ffffffffffffff     | 	.quad -63
0x3c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3d0:                      | 	.align 16
0x3d0:                      | Predest:
0x3d0: fadebc0000000000     | 	.quad 0xbcdefa
0x3d8:                      | dest:
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0:                      | Postdest:
0x5d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5d8:                      | .align 8
                            | # Run time stack
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
                            | 
0x658:                      | Stack:
