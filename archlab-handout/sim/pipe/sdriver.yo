                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. Implement the iaddq instruction and Use it
                            | # 2. Loop Rolling 5 * 1
                            | # 
                            | # 
                            | # 
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 		
                            | # Loop Rolling
0x034: 2025                 | 	rrmovq %rdx,%rbp
0x036: c0f5fbffffffffffffff | 	iaddq $-5,%rbp		# limit = len - 5
0x040: 6152                 | 	subq %rbp,%rdx		# len = len - limit
0x042: 6255                 | 	andq %rbp,%rbp		# limit <= 0?
0x044: 716c01000000000000   | 	jle L_rest_handle	
0x04d:                      | L1:
0x04d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x057: 50b70800000000000000 | 	mrmovq 0x8(%rdi), %r11	# read val from src...
0x061: 50c71000000000000000 | 	mrmovq 0x10(%rdi), %r12	# read val from src...
0x06b: 50d71800000000000000 | 	mrmovq 0x18(%rdi), %r13	# read val from src...
0x075: 50e72000000000000000 | 	mrmovq 0x20(%rdi), %r14	# read val from src...
0x07f: 50872800000000000000 | 	mrmovq 0x28(%rdi), %r8	# read val from src...
                            | 
0x089: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x093: 40b60800000000000000 | 	rmmovq %r11, 0x8(%rsi)	# ...and store it to dst
0x09d: 40c61000000000000000 | 	rmmovq %r12, 0x10(%rsi)	# ...and store it to dst
0x0a7: 40d61800000000000000 | 	rmmovq %r13, 0x18(%rsi)	# ...and store it to dst
0x0b1: 40e62000000000000000 | 	rmmovq %r14, 0x20(%rsi)	# ...and store it to dst
0x0bb: 40862800000000000000 | 	rmmovq %r8, 0x28(%rsi)	# ...and store it to dst
                            | 	
0x0c5:                      | check_1:
0x0c5: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c7: 71da00000000000000   | 	jle check_2		# if so, goto check_next:	
0x0d0: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x0da:                      | check_2:
0x0da: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0dc: 71ef00000000000000   | 	jle check_3		# 
0x0e5: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x0ef:                      | check_3:
0x0ef: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x0f1: 710401000000000000   | 	jle check_4			# 	
0x0fa: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x104:                      | check_4:
0x104: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x106: 711901000000000000   | 	jle check_5			
0x10f: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x119:                      | check_5:
0x119: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x11b: 712e01000000000000   | 	jle check_6		
0x124: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x12e:                      | check_6:
0x12e: 6288                 | 	andq %r8, %r8		# val <= 0?
0x130: 714301000000000000   | 	jle Npos		
0x139: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x143:                      | Npos:		
0x143: c0f5faffffffffffffff | 	iaddq	$-6,%rbp	# limit -= 6	
0x14d: c0f73000000000000000 | 	iaddq	$0x30,%rdi		# src += 6
0x157: c0f63000000000000000 | 	iaddq	$0x30,%rsi		# dst += 6
0x161: 6255                 | 	andq %rbp,%rbp		# limit > 0?
0x163: 764d00000000000000   | 	jg L1				# if so, goto L1:
                            | 
                            | # Handle the rest elements
0x16c:                      | L_rest_handle:
0x16c: 6052                 | 	addq %rbp,%rdx
0x16e: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x170: 71cb01000000000000   | 	jle Done			# if so, goto Done:
0x179:                      | L_rest:
0x179: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x183: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x185: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x18f: 71a201000000000000   | 	jle Npos_rest			# if so, goto Npos_rest:	
0x198: c0f00100000000000000 | 	iaddq	$1,%rax		# count++
0x1a2:                      | Npos_rest:
0x1a2: c0f2ffffffffffffffff | 	iaddq	$-1,%rdx	# len -= 1	
0x1ac: c0f70800000000000000 | 	iaddq	$8,%rdi		# src += 1
0x1b6: c0f60800000000000000 | 	iaddq	$8,%rsi		# dst += 1
0x1c0: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x1c2: 767901000000000000   | 	jg L_rest				# if so, goto L_rest:
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1cb:                      | Done:
0x1cb: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1cc:                      | End:
                            | #/* $end ncopy-ys */
0x1cc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1d0:                      | 	.align 8
0x1d0:                      | src:
0x1d0: 0100000000000000     | 	.quad 1
0x1d8: 0200000000000000     | 	.quad 2
0x1e0: fdffffffffffffff     | 	.quad -3
0x1e8: fcffffffffffffff     | 	.quad -4
0x1f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x200:                      | 	.align 16
0x200:                      | Predest:
0x200: fadebc0000000000     | 	.quad 0xbcdefa
0x208:                      | dest:
0x208: abefcd0000000000     | 	.quad 0xcdefab
0x210: abefcd0000000000     | 	.quad 0xcdefab
0x218: abefcd0000000000     | 	.quad 0xcdefab
0x220: abefcd0000000000     | 	.quad 0xcdefab
0x228:                      | Postdest:
0x228: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x230:                      | .align 8
                            | # Run time stack
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
                            | 
0x2b0:                      | Stack:
