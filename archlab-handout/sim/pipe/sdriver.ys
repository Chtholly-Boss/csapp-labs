#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 1. Implement the iaddq instruction and Use it
# 2. Loop Rolling 5 * 1
# 
# 
# 
# 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
		
# Loop Rolling
	rrmovq %rdx,%rbp
	iaddq $-5,%rbp		# limit = len - 5
	subq %rbp,%rdx		# len = len - limit
	andq %rbp,%rbp		# limit <= 0?
	jle L_rest_handle	
L1:
	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 0x8(%rdi), %r11	# read val from src...
	mrmovq 0x10(%rdi), %r12	# read val from src...
	mrmovq 0x18(%rdi), %r13	# read val from src...
	mrmovq 0x20(%rdi), %r14	# read val from src...
	mrmovq 0x28(%rdi), %r8	# read val from src...

	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 0x8(%rsi)	# ...and store it to dst
	rmmovq %r12, 0x10(%rsi)	# ...and store it to dst
	rmmovq %r13, 0x18(%rsi)	# ...and store it to dst
	rmmovq %r14, 0x20(%rsi)	# ...and store it to dst
	rmmovq %r8, 0x28(%rsi)	# ...and store it to dst
	
check_1:
	andq %r10, %r10		# val <= 0?
	jle check_2		# if so, goto check_next:	
	iaddq	$1,%rax		# count++
check_2:
	andq %r11, %r11		# val <= 0?
	jle check_3		# 
	iaddq	$1,%rax		# count++
check_3:
	andq %r12, %r12		# val <= 0?
	jle check_4			# 	
	iaddq	$1,%rax		# count++
check_4:
	andq %r13, %r13		# val <= 0?
	jle check_5			
	iaddq	$1,%rax		# count++
check_5:
	andq %r14, %r14		# val <= 0?
	jle check_6		
	iaddq	$1,%rax		# count++
check_6:
	andq %r8, %r8		# val <= 0?
	jle Npos		
	iaddq	$1,%rax		# count++
Npos:		
	iaddq	$-6,%rbp	# limit -= 6	
	iaddq	$0x30,%rdi		# src += 6
	iaddq	$0x30,%rsi		# dst += 6
	andq %rbp,%rbp		# limit > 0?
	jg L1				# if so, goto L1:

# Handle the rest elements
L_rest_handle:
	addq %rbp,%rdx
	andq %rdx,%rdx		# len <= 0?
	jle Done			# if so, goto Done:
L_rest:
	mrmovq (%rdi), %r10	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r10, (%rsi)	# ...and store it to dst
	jle Npos_rest			# if so, goto Npos_rest:	
	iaddq	$1,%rax		# count++
Npos_rest:
	iaddq	$-1,%rdx	# len -= 1	
	iaddq	$8,%rdi		# src += 1
	iaddq	$8,%rsi		# dst += 1
	andq %rdx,%rdx		# len > 0?
	jg L_rest				# if so, goto L_rest:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
