                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40006000000000000 |     irmovq  stack, %rsp
0x00a: 804800000000000000   |     call    main
0x013: 00                   |     halt
                            | 
0x018:                      |     .align 8
                            | # Source block
0x018:                      |     src:
0x018: 0a00000000000000     |         .quad 0x00a
0x020: b000000000000000     |         .quad 0x0b0
0x028: 000c000000000000     |         .quad 0xc00
                            | # Destination block
0x030:                      |     dest:
0x030: 1101000000000000     |         .quad 0x111
0x038: 2202000000000000     |         .quad 0x222
0x040: 3303000000000000     |         .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq  src, %rdi
0x052: 30f63000000000000000 |     irmovq  dest, %rsi
0x05c: 30f80300000000000000 |     irmovq  $3, %r8
0x066: 807000000000000000   |     call    copy_block
0x06f: 90                   |     ret
                            | 
                            | # long copy_block(long *src, long *dest, long len)
                            | # src in %rdi,dest in %rsi,len in %r8
0x070:                      | copy_block:
0x070: 6300                 |     xorq    %rax,%rax   # result = 0
0x072: 30f30800000000000000 |     irmovq  $8, %rbx
0x07c: 30f10100000000000000 |     irmovq  $1, %rcx
0x086: 6288                 |     andq    %r8, %r8    # set CC
0x088: 70af00000000000000   |     jmp     test
                            | 
0x091:                      | loop:
0x091: 50970000000000000000 |     mrmovq  (%rdi),%r9  # val = *src
0x09b: 6037                 |     addq    %rbx,%rdi   # src++
0x09d: 40960000000000000000 |     rmmovq  %r9, (%rsi) # *dest = val
0x0a7: 6036                 |     addq    %rbx,%rsi   # dest++
0x0a9: 6390                 |     xorq    %r9,%rax    # result = result ^ val
0x0ab: 6118                 |     subq    %rcx, %r8   # len--
0x0ad: 6288                 |     andq    %r8, %r8    # set CC
0x0af:                      | test:
0x0af: 769100000000000000   |     jg     loop
0x0b8: 90                   |     ret
                            |     
                            | # Stack starts here and grows to low address
0x600:                      |     .pos 0x600
0x600:                      | stack:
